    # Usage:
    #   aws cloudformation --region <region> create-stack --stack-name <stack name> --template-body file://project-infrastructure.yaml
    
    # This template will:
    #   Create a VPC with:
    #       3 Public Subnets in each AZs
    #   An Internet Gateway (with routes to it for Public Subnets)
    #   Route table    
    
    Resources:
      WebAppVPC:
        Type: 'AWS::EC2::VPC'
        Properties:
          CidrBlock: 10.0.0.0/16
          Tags:
            - Key: Name
              Value: webAppVPC
     
      WebAppSubnet1:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref WebAppVPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: 10.0.1.0/24
          MapPublicIpOnLaunch: true
     
      WebAppSubnet2:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref WebAppVPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: 10.0.2.0/24
          MapPublicIpOnLaunch: true
     
      WebAppSubnet3:
        Type: 'AWS::EC2::Subnet'
        Properties:
          VpcId: !Ref WebAppVPC
          AvailabilityZone: !Select [ 2, !GetAZs '' ]
          CidrBlock: 10.0.3.0/24
          MapPublicIpOnLaunch: true
      
      WebAppInternetGateway:
        Type: 'AWS::EC2::InternetGateway'
        Properties:
          Tags:
            - Key: Name
              Value: !Join [_, [!Ref 'AWS::StackName']]
            - Key: Network
              Value: Public
      
      GatewayToInternet:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
          VpcId: !Ref WebAppVPC
          InternetGatewayId: !Ref WebAppInternetGateway
      
      PublicRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
          VpcId: !Ref WebAppVPC
          Tags:
            - Key: Network
              Value: Public
      
      PublicRoute:
        Type: 'AWS::EC2::Route'
        DependsOn: GatewayToInternet
        Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref WebAppInternetGateway
     
      PublicSubnet1RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: !Ref WebAppSubnet1
          RouteTableId: !Ref PublicRouteTable
     
      PublicSubnet2RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: !Ref WebAppSubnet2
          RouteTableId: !Ref PublicRouteTable
      
      PublicSubnet3RouteTableAssociation:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties:
          SubnetId: !Ref WebAppSubnet3
          RouteTableId: !Ref PublicRouteTable

      WebAppInstance:
        Type: AWS::EC2::Instance
        Properties:
          ImageId: ami-0c9b0982edfbd29c2
          InstanceType: t2.micro
          BlockDeviceMappings:
            -
              DeviceName: "/dev/xvda"
              Ebs:
                VolumeSize: 20
                VolumeType: gp2
          SecurityGroupIds: [{ "Fn::GetAtt" : ["InstanceSecurityGroup", "GroupId"] }]
          SubnetId: !Ref WebAppSubnet1
      
      InstanceSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Web application group security
          VpcId: !Ref WebAppVPC
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 8080
              ToPort: 8080
              CidrIp: 0.0.0.0/0



      